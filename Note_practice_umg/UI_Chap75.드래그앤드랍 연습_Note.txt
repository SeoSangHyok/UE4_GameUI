1. Widget의 드래그앤드랍 처리는 마우스이벤트 오버라이딩(주로 OnMouseButtonDown)과 UWidgetBlueprintLibrary::DetectDragIfPressed / DetectDrag 함수를 이용한다.

2. UWidgetBlueprintLibrary::DetectDragIfPressed / DetectDrag 함수는 드래그를 감지만 한다. 감지된 드래그 명령은 UUserwidget::NativeOnDragDetected를 오버라이딩해서 처리한다.

3. NativeOnDragDetected발생시 UWidgetBlueprintLibrary::CreateDragDropOperation 함수를 호출해야 비로소 드래그 처리가 시작된다. (드롭은? 아직..)
   NativeOnDragDetected함수의 인자에는 UDragDropOperation 포인터 레퍼런스가 있는데 해당 포인터로 드래그에 필요한 정보들을 넣어서 처리하면된다.

4. 드래그에 필요한 정보는 게임/상황에 따라 다를수 있으므로 UDragDropOperation을 상속받은 클래스를 생성해서 넘기도록 한다.
   UWidgetBlueprintLibrary::CreateDragDropOperation 함수호출시 UDragDropOperation 의 서브클래스를 넣어주니 필요한 클래스 정의후 해당 클래스를 드래그드롭 오퍼레이션을 시작한다.

5. UWidgetBlueprintLibrary::CreateDragDropOperation 은 드래그 드랍용 위젯을 생성해서 마우스를 따라다니게끔 한다. 즉 원본 위젯에는 영향을 미치지 않기때문에
   원본 위젯에 처리가 필요한경우 따로 처리해야한다.

6. 드롭 이벤트는 NativeOnDrop() 함수를 이용해서 처리하면된다. 처리시 드롭 이벤트가 발생한 위젯에서 제정의 해서 처리해야한다.

7. NativeOnDrop() 함수는 성공여부에 따라 true/false를 반환하도록 할것

8. Drop이벤트가 호출되지 않는경우 Drop이벤트가 발생되지 않는 위젯의 hittest를 확인할것. visible을 제외한 나머지의 경우 히트테스트를 안하기때문에 Drop이벤트가 발생되지 않는다.

9. 요약하자면
  a-1. 드래그 드롭을 처리할 위젯에 드래그 입력을 처리할 마우스 입력을 오버라이딩(90%이상이 마우스 클릭(OnMouseButtonDown)이 될것)
  a-2. 마우스 입력 오버라이딩 함수내부에 UWidgetBlueprintLibrary::DetectDragIfPressed / DetectDrag 함수를 호출해서 드래그 감지를 켜고
  b-1. 드래그 발생을 감지하는 NativeOnDragDetected(BP에선 On Drag Detected)를 오버라이딩, UWidgetBlueprintLibrary::CreateDragDropOperation 함수로 드레그드롭 오퍼레이션을 시작
  b-2. 드래그에 필요한 정보를 가지는 UDragDropOperation를 상속받은 클래스를 생성, UWidgetBlueprintLibrary::CreateDragDropOperation 수행시 받아오게끔 처리
  b-3. 넘어온 인자를 NativeOnDragDetected의 UDragDropOperation에 반환
  c-1. 드롭 이벤트를 감지할 위젯에 NativeOnDrop()함수를 오버라이딩
  c-2. 해당 위젯에서 드롭이벤트 처리

10. 드래그 드랍시 드랍된 위젯은 마우스커서기준 좌상단에 붙어서 위젯이 좀 튀는현상이 있다. 이를 완화하려면 드래그 시작할때 위젯의 클릭지점 오프셋을 저장했다
    드랍이 발생했을때 위젯을 저장한 오프셋만큼 이동시켜주면된다.

11. 위젯 내부의 마우스 좌표 오프셋은...
  - FPointerEvent::GetScreenSpacePosition()으로 마우스 스크린 좌표를 구하고
  - USlateBlueprintLibrary::AbsoluteToLocal 함수로 마우스 내부 로컬좌표를 구하면 해당 좌표가 오프셋

12. 드래그할때 UDragDropOperation::Pivot 변수로 드래그되는 위젯의 마우스기준 위치를 잡아줄수 있으니 참고
